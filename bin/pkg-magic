#!/bin/bash

#set -e

userbox(){
	kdialog --inputbox "Enter username:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No username"
	fi
}

pwdbox(){
	kdialog --password "Enter password:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No password"
	fi
}

catbox(){
	declare -A item
	item[any]=0
	item[daemons]=2
	item[devel]=3
	item[editors]=4
	item[emulators]=5
	item[games]=6
	item[gnome]=7
	item[i18n]=8
	item[kde]=9
	item[lib]=10
	item[modules]=11
	item[multimedia]=12
	item[network]=13
	item[office]=14
	item[science]=15
	item[system]=16
	item[x11]=17
	item[xfce]=18
	item[kernels]=19

	local select=$(kdialog --combobox "Select category"  "${!item[@]}") flag=$?
	if [ $flag -eq 1 ];then
		exit
	else
		if [[ ! -z $select ]];then
			echo "${item[$select]}"
		else
			echo ${item[any]}
		fi
	fi
}

popup(){
	kdialog --title "$1" --passivepopup "$2"  10
}

ynbox(){
	kdialog --warningcontinuecancel "${CONFIG} already exists. Overwrite?"
	local flag=$?
	if [ ${flag} -eq 0 ];then
		configdlg
	else
		exit
	fi
}

writer(){
	echo $1 >> "${CONFIG}"
}

new_config(){
	echo -n > ${CONFIG}
}

configdlg(){
	local user pwd
	user=$(userbox)
	pwd=$(pwdbox)
	if [[ -z ${user} ]] && [[ -z ${pwd} ]];then
		popup "Warning" "No config written."
		exit
	else
		new_config
		writer "USR=${user}"
		writer "PWD=${pwd}"
		popup "Success" "Config written."
	fi
}

pkgbox(){
	source ${URI}
	local i=0 item name switch=off
	if [[ ! -z ${pkgbase} ]];then
		for n in ${pkgname[*]};do
			item[$i]="$i $n $switch"
			name[$i]="$n"
			i=$((i+1))
		done
	fi
	local select=$(kdialog --checklist "Select packages:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No packages selected."
		exit
	else
		local list
		for s in ${select//\"/};do
			list="${list:-}${list:+,}${name[$s]}"
		done
		echo ${list}
	fi

}

rulesbox(){
	declare -A rule
	rule[0]=anyelf
	rule[1]=array
	rule[2]=badbackups
	rule[3]=capsnamespkg
	rule[4]=carch
	rule[5]=checksums
	rule[6]=directoryname
	rule[7]=elfexecstack
	rule[8]=elfpaths
	rule[9]=elftextrel
	rule[10]=emptydir
	rule[11]=extravars
	rule[12]=fhs-infopages
	rule[13]=fhs-manpages
	rule[14]=filenames
	rule[15]=fileownership
	rule[16]=giomodules
	rule[17]=glibschemas
	rule[18]=gnomemime
	rule[19]=hardlinks
	rule[20]=hicoloricons
	rule[21]=infodirectory
	rule[22]=infoinstall
	rule[23]=invalidstartdir
	rule[24]=javafiles
	rule[25]=kdeprograms
	rule[26]=libtool
	rule[27]=license
	rule[28]=licensepkg
	rule[29]=lots-of-docs
	rule[30]=mimedesktop
	rule[31]=mimefiles
	rule[32]=missingbackups
	rule[33]=perllocal
	rule[34]=permissions
	rule[35]=pkgnameindesc
	rule[36]=rpath
	rule[37]=rubypaths
	rule[38]=scrollkeeper
	rule[39]=sfurl
	rule[40]=shebangdepends
	rule[41]=sodepends
	rule[42]=splitpkgfunctions
	rule[43]=splitpkgmakedeps
	rule[44]=symlink
	rule[45]=tags
	rule[46]=urlpkg

 	local item switch=off
	for (( i=0; i<${#rule[@]}; ++i));do
		item[$i]="$i ${rule[$i]} ${switch}"
	done
 	local select=$(kdialog --checklist "Select rules:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No rules selected."
		return
	else
	 	local list
		for s in ${select//\"/};do
			list="${list:-}${list:+,}${rule[$s]}"
		done
		echo ${list}
	fi
}

optbox(){
	local q=$(kdialog --inputbox "Enter query or parameter:") flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No input."
		exit
	else
		echo $q
	fi
}

truncate(){
	local fn=$1
	echo ${fn%%-[0-9]*}
}

configure(){
   	if [[ ! -f "${CONFIG}" ]]; then
		configdlg
	else
		ynbox
	fi
}

get_session(){
	local user pwd  url="${URL}/login/" login session
	[[ -f "${CONFIG}" ]] &&  source ${CONFIG}
	if [[ ! -z ${USR} ]] && [[ ! -z ${PWD} ]];then
		user=${USR}
		pwd=${PWD}
	else
		user=$(userbox)
		pwd=$(pwdbox)
	fi
	login=$(curl -sSi -F user=${user} -F passwd=${pwd} -H 'Expect: ' ${url})
	session=$(echo "${login}" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
	echo ${session}
}

submit(){
	# $1: session
	local submit sid category url="${URL}/submit/"
	if [[ -z $1 ]];then
		popup "Canceled AUR upload." "No session registered."
		exit
	fi
	submit=$(curl -sSi -H 'Expect: ' -b $1 ${url})
	sid=$(echo "${submit}" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)

	submit=$(curl -sSi -H 'Expect: ' -F token="${sid}" -F pkgsubmit=1 -F category="$(catbox)" -F pfile=@${URI} -b $1 ${url} | tr -d '\r')

	pkg_url="${URL}"$(echo "${submit}" | awk '/^Location: / {print $2}')
}

upload(){
	popup "AUR upload started." "$(basename ${URI})"
	submit "$(get_session)"
	local html='<a href="'"${pkg_url}"'">'"${pkg_url}"'</a>'
	popup "AUR upload finished." "${html}"
}

selected_files(){
	local fn reqfn list
	for i in ${URI[*]};do
		fn=$(basename $i)
		if [[ ${ACTION} == "-r" ]];then
			reqfn=$(truncate $fn)
			list="${list:-}${list:+ }${reqfn}"
		else
			list="${list:-}${list:+ }${fn}"
		fi
	done
	echo ${list}
}

ACTION=$1
URI=$2
ARGS=$3
OPTS=$4

[[ -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs ]] && . ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs

CONFIG_DIR=${XDG_CONFIG_HOME:-~/.config}
IMG_DIR=${XDG_PICTURES_DIR:-~/graphs}

CONFIG=${CONFIG_DIR}/pkg-tools.conf
URL="https://aur.archlinux.org"

get_workdir(){
	local wd
	for u in  ${URI[*]};do
		wd=$(dirname $u)
	done
	echo $wd
}

run_in_konsole(){
	# $1: cmd
	konsole --noclose --hide-menubar --workdir "$(get_workdir)" -e $SHELL -c "$1"
}

img_gen(){
	local cmd=$(echo $1) img ext=${OPTS}
	for x in ${cmd};do
		img=$x
	done
	if [[ ${ARGS} == "-gr" ]];then
		img="${img}_revdeps.${ext}"
	else
		img="${img}_deps.${ext}"
	fi
	echo $(${cmd}) | dot -T ${ext} > "${IMG_DIR}/${img}"
	html='<a href="'"${IMG_DIR}/${img}"'">'"${IMG_DIR}/${img}"'</a>'
	popup "Image generated." "${html}"
}

cmd_gen(){
	declare -A bin
	bin[-m]=makepkg
	bin[-n]=namcap
	bin[-r]=repo-add
	bin[-a]=repo-remove
	bin[-t]=pactree
	bin[-f]=pkgfile
	bin[-y]=yaourt
	bin[-c]=configure
	bin[-u]=upload
	bin[-o]=pacman-optimize

	local cmd opts ext="tar.xz" is_su=0
	case ${ACTION} in
		"-a" | "-r")
			local repo=$(basename $(get_workdir))
			opts="${repo}.${OPTS}.${ext} $(selected_files)"
		;;
		"-m")
			if [[ ${OPTS} == "--pkg" ]];then
				opts="${OPTS} $(pkgbox)"
			fi
		;;
		"-t")
			if [[ ${ARGS} == "-g" ]] || [[ ${ARGS} == "-gr" ]];then
				if [[ ${URI} == "-q" ]];then
					opts=$(optbox)
				else
					opts=$(truncate $(basename ${URI}))
				fi
			else
				opts=$(truncate $(basename ${URI}))
			fi
		;;
		"-y")
			if [[ ${ARGS} == "-Sy" ]] || [[ ${ARGS} == "-Syy" ]] ;then
				is_su=1
			elif [[ ${ARGS} == "-U" ]];then
				opts=$(selected_files)
				is_su=1
			else
				opts=$(optbox)
			fi
		;;
		"-n")
			if [[ ${ARGS} == "-r" ]] || [[ ${ARGS} == "-e" ]];then
				opts="$(rulesbox) ${URI}"
			else
				opts=${URI}
			fi
		;;
		"-f")
			if [[ ${ARGS} == "-u" ]];then
				is_su=1
			elif [[ ${ARGS} == "-s" ]];then
				opts=$(optbox)
			else
				opts=$(truncate $(basename ${URI}))
			fi
		;;
		"-o")
			is_su=1
		;;
	esac
	if [ ${is_su} -eq 1 ];then
		cmd="sudo ${bin[${ACTION}]} ${ARGS} ${opts}"
	else
		cmd="${bin[${ACTION}]} ${ARGS} ${opts}"
	fi
	echo ${cmd}
}

if [[ ! -d ${IMG_DIR} ]];then
	mkdir -p ${IMG_DIR}
fi

if [[ ${ACTION} == "-u" ]] || [[ ${ACTION} == "-c" ]];then
	$(cmd_gen)
elif [[ ${ACTION} == "-t" ]];then
 	if [[ ${ARGS} == "-g" ]] || [[ ${ARGS} == "-gr" ]];then
 		img_gen "$(cmd_gen)"
 	else
 		run_in_konsole "$(cmd_gen)"
 	fi
else
	#popup "CMD" "$(cmd_gen)"
	run_in_konsole "$(cmd_gen)"
fi
