#!/bin/bash

#set -e

param=$1
uri=$2
args=$3
action=$4
type=$5

config="$HOME/.config/aurlogin"
aur_url="https://aur.archlinux.org"
log="$HOME/debug.log"
ext="tar.xz"
categories=('daemons' 'devel' 'editors' 'emulators' 'games' 'gnome' 'i18n' 'kde' 'kernels' 'lib' 'modules' 'multimedia' 'network' 'office' 'science' 'system' 'x11' 'xfce')

userbox(){
	kdialog --inputbox "Enter username:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No username"
	fi
}

pwdbox(){
	kdialog --password "Enter password:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No password"
	fi
}

catbox(){
	kdialog --combobox "Select category"  "${categories[@]}"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No category"
	fi
}

popup(){
	kdialog --title "$1" --passivepopup "$2"  10
}

ynbox(){
	kdialog --warningcontinuecancel "$config already exists. Overwrite?"
	local flag=$?
	if [ ${flag} -eq 0 ];then
		new_config
	else
		exit
	fi
}

writer(){
	echo $1 >> "$config"
}

debug(){
	popup "Debug" $1
}

new_config(){
	local user pwd ret=$?
	user=$(userbox)
	pwd=$(pwdbox)
	debug "$user $pwd"
	if [[ -z $user ]] && [[ -z $pwd ]];then
		popup "Warning" "No config written"
	else
		echo -n > "$config"
		writer "USR=$user"
		writer "PWD=$pwd"
	fi
}

configure(){
   	if [[ ! -f "$config" ]]; then
		new_config
	else
		ynbox
	fi
}

aur_login(){
	local user pwd login info url="${aur_url}/login/" session

	[[ -f "$config" ]] &&  source $config

	if [[ ! -z $USR ]] && [[ ! -z $PWD ]];then
		user=$USR
		pwd=$PWD
		#debug "$user $pwd"
	else
		user=$(userbox)
		pwd=$(pwdbox)
		#debug "$user $pwd"
	fi

	login=$(curl -sSi -F user=$user -F passwd=$pwd -H 'Expect: ' $url)

	session=$(echo "$login" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
	#debug "$session"
	echo $session
}

aur_submit(){
	local submit sid info cat=$(catbox) url="${aur_url}/submit/"

	if [[ -z $1 ]];then
		info=$(popup "Cancelled AUR upload." "No session registered.")
		exit
	fi

	submit=$(curl -sSi -H 'Expect: ' -b $1 $url)

	sid=$(echo "$submit" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)
	#debug "$sid"
	submit=$(curl -sSi -H 'Expect: ' -F token="$sid" -F pkgsubmit=1 -F category=$cat -F pfile=@$uri -b $1 $url | tr -d '\r')

	pkg_url="${aur_url}"$(echo "$submit" | awk '/^Location: / {print $2}')
	debug "$pkg_url"
}

upload(){
	local html='<a href="'"${pkg_url}"'">'"${pkg_url}"'</a>' info
	info=$(popup "AUR upload started." "$(basename $uri)")
	aur_submit "$(aur_login)"
	info=$(popup "AUR upload finished." "${html}")
}

selected_files(){
	local fn reqfn list
	IFS=" "
	for i in ${uri};do
		fn=$(basename $i)
		if [ ${action} == "remove" ];then
			reqfn=${fn%%-[0-9]*}
			list+=" $reqfn"
		else
			list+=" $fn"
		fi
	done
	IFS=""
	echo ${list}
}

cmd_gen(){
	local bin cmd
	case ${param} in
		"-M")
			bin="makepkg"
			cmd="${bin} ${args}"
		;;
		"-N")
			bin="namcap"
			cmd="${bin} ${args} ${uri}"
		;;
		"-R")
			bin="repo"
			cmd="${bin}-${action} ${args} ${repo_name}.${type}.$ext $(selected_files)"
		;;
		"-P")
			bin="pacman"
			cmd="sudo ${bin} ${args} $(selected_files)"
		;;
	esac
	echo ${cmd}
}

run_in_konsole(){
	konsole --noclose --workdir "$wd" -e $SHELL -c "eval $(cmd_gen)"
}

main(){
	case ${param} in
		"-M" | "-N")
			wd=$(dirname $uri)
			run_in_konsole
		;;
		"-R" | "-P")
			IFS=" "
			for i in ${uri};do
				wd=$(dirname $i)
				repo_name=$(basename $wd)
			done
			IFS=""
			run_in_konsole
		;;
		"-U")
			upload
		;;
		"-C")
			configure
		;;
	esac
}

main

