#!/bin/bash

userbox(){
	kdialog --inputbox "Enter username:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No username"
	fi
}

pwdbox(){
	kdialog --password "Enter password:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No password"
	fi
}

catbox(){
	declare -A item
	item[any]=0
	item[daemons]=2
	item[devel]=3
	item[editors]=4
	item[emulators]=5
	item[games]=6
	item[gnome]=7
	item[i18n]=8
	item[kde]=9
	item[lib]=10
	item[modules]=11
	item[multimedia]=12
	item[network]=13
	item[office]=14
	item[science]=15
	item[system]=16
	item[x11]=17
	item[xfce]=18
	item[kernels]=19

	local select=$(kdialog --combobox "Select category"  "${!item[@]}") flag=$?
	if [ $flag -eq 1 ];then
		exit
	else
		if [[ ! -z $select ]];then
			echo "${item[$select]}"
		else
			echo ${item[any]}
		fi
	fi
}

popup(){
	kdialog --title "$1" --passivepopup "$2"  10
}

ynbox(){
	kdialog --warningcontinuecancel "${CONFIG} already exists. Overwrite?"
	local flag=$?
	if [ ${flag} -eq 0 ];then
		configdlg
	else
		exit
	fi
}

writer(){
	echo $1 >> "${CONFIG}"
}

new_config(){
	echo -n > ${CONFIG}
}

configdlg(){
	local user pwd
	user=$(userbox)
	pwd=$(pwdbox)
	if [[ -z ${user} ]] && [[ -z ${pwd} ]];then
		popup "Warning" "No config written."
		exit
	else
		new_config
		writer "USR=${user}"
		writer "PWD=${pwd}"
		popup "Success" "Config written."
	fi
}

pkgbox(){
	source ${URI}
	local i=0 item name switch=off
	if [[ ! -z ${pkgbase} ]];then
		for n in ${pkgname[*]};do
			item[$i]="$i $n $switch"
			name[$i]="$n"
			i=$((i+1))
		done
	fi
	local select=$(kdialog --checklist "Select packages:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No packages selected."
		exit
	fi
	local list
	for s in ${select//\"/};do
		list="${list:-}${list:+,}${name[$s]}"
	done
	echo ${list}
}

rulesbox(){
	local rules=('anyelf' 'array' 'badbackups' 'capsnamespkg' 'carch' 'checksums' 'directoryname' 'elfexecstack' 'elfpaths' 'elftextrel' 'emptydir' 'extravars' 'fhs-infopages' 'fhs-manpages' 'filenames' 'fileownership' 'giomodules' 'glibschemas' 'gnomemime' 'hardlinks' 'hicoloricons' 'infodirectory' 'infoinstall' 'invalidstartdir' 'javafiles' 'kdeprograms' 'libtool' 'license' 'licensepkg' 'lots-of-docs' 'mimedesktop' 'mimefiles' 'missingbackups' 'perllocal' 'permissions' 'pkgnameindesc' 'rpath' 'rubypaths' 'scrollkeeper' 'sfurl' 'shebangdepends' 'sodepends' 'splitpkgfunctions' 'splitpkgmakedeps' 'symlink' 'tags' 'urlpkg')

	local i=0 item rule switch=off
	for n in ${rules[*]};do
 			item[$i]="$i $n $switch"
 			rule[$i]="$n"
			i=$((i+1))
	done
	local select=$(kdialog --checklist "Select rules:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No rules selected."
		exit
	fi
	local list
	for s in ${select//\"/};do
		list="${list:-}${list:+,}${rules[$s]}"
	done
	echo ${list}
}

optbox(){
	local q=$(kdialog --inputbox "Enter query:") flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No input."
		exit
	else
		echo $q
	fi
}

truncate(){
	local fn=$1
	echo ${fn%%-[0-9]*}
}

configure(){
   	if [[ ! -f "${CONFIG}" ]]; then
		configdlg
	else
		ynbox
	fi
}

get_session(){
	local user pwd  url="${URL}/login/" login session
	[[ -f "${CONFIG}" ]] &&  source ${CONFIG}
	if [[ ! -z ${USR} ]] && [[ ! -z ${PWD} ]];then
		user=${USR}
		pwd=${PWD}
	else
		user=$(userbox)
		pwd=$(pwdbox)
	fi
	login=$(curl -sSi -F user=${user} -F passwd=${pwd} -H 'Expect: ' ${url})
	session=$(echo "${login}" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
	echo ${session}
}

submit(){
	# $1: session
	local submit sid category url="${URL}/submit/"
	if [[ -z $1 ]];then
		popup "Canceled AUR upload." "No session registered."
		exit
	fi
	submit=$(curl -sSi -H 'Expect: ' -b $1 ${url})
	sid=$(echo "${submit}" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)

	submit=$(curl -sSi -H 'Expect: ' -F token="${sid}" -F pkgsubmit=1 -F category="$(catbox)" -F pfile=@${URI} -b $1 ${url} | tr -d '\r')

	echo "$(echo $submit)" > $wd/submit.log

	pkg_url="${URL}"$(echo "${submit}" | awk '/^Location: / {print $2}')
}

upload(){
	popup "AUR upload started." "$(basename ${URI})"
	submit "$(get_session)"
	local html='<a href="'"${pkg_url}"'">'"${pkg_url}"'</a>'
	popup "AUR upload finished." "${html}"
}

file_list(){
	local fn reqfn flist
	for i in ${URI[*]};do
		fn=$(basename $i)
		if [[ ${PARAM} == "-Rr" ]];then
			reqfn=$(truncate $fn)
			flist+=" ${reqfn}"
		else
			flist+=" ${fn}"
		fi
	done
	echo ${flist}
}

PARAM=$1
URI=$2
ARGS=$3
OPTS=$4
CONFIG="$HOME/.config/aurlogin"
URL="https://aur.archlinux.org"

get_workdir(){
	local wd
	for u in  ${URI[*]};do
		wd=$(dirname $u)
	done
	echo $wd
}

run_in_konsole(){
	konsole --noclose --hide-menubar --workdir "$(get_workdir)" -e $SHELL -c "$(cmd_gen)"
}

cmd_gen(){
	declare -A BIN
	BIN[-m]=makepkg
	BIN[-n]=namcap
	BIN[-Ra]=repo-add
	BIN[-Rr]=repo-remove
	BIN[-p]=pacman
	BIN[-t]=pactree
	BIN[-f]=pkgfile
	BIN[-y]=yaourt
	BIN[-c]=configure
	BIN[-u]=upload

	local CMD MISC EXT="tar.xz" IS_SU=0
	case ${PARAM} in
		"-Ra" | "-Rr")
			REPO=$(basename $(get_workdir))
			MISC="${REPO}.${OPTS}.${EXT} $(file_list)"
		;;
		"-m")
			for p in ${ARGS[*]};do
				if [[ $p == "--pkg" ]];then
					MISC=$(pkgbox)
				fi
			done
		;;
		"-p")
			MISC=$(file_list)
			IS_SU=1
		;;
		"-t")
			MISC=$(truncate $(basename ${URI}))
		;;
		"-y")
			MISC=$(optbox)
		;;
		"-n")
			if [[ ${ARGS} == "-r" ]] || [[ ${ARGS} == "-e" ]];then
				MISC="$(rulesbox) ${URI}"
			else
				MISC=${URI}
			fi
		;;
		"-f")
			if [[ ${ARGS} == "-u" ]];then
				IS_SU=1
			else
				MISC=$(truncate $(basename ${URI}))
			fi
		;;
	esac
	if [ ${IS_SU} -eq 1 ];then
		CMD="sudo ${BIN[${PARAM}]} ${ARGS} ${MISC}"
	else
		CMD="${BIN[$PARAM]} ${ARGS} ${MISC}"
	fi
	echo ${CMD}
}

if [[ ${PARAM} == "-a" ]];then
	upload
elif [[ ${PARAM} == "-c" ]];then
	configure
else
	#popup "CMD" "$(cmd_gen)"
	run_in_konsole
fi
