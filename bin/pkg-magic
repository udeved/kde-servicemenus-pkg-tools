#!/bin/bash

param=$1
uri=$2
args=$3
action=$4
type=$5

config="$HOME/.config/aurlogin"
aur_url="https://aur.archlinux.org"

userbox(){
	kdialog --inputbox "Enter username:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No username"
	fi
}

pwdbox(){
	kdialog --password "Enter password:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No password"
	fi
}

catbox(){
	declare -A entry
	entry[any]=0
	entry[daemons]=2
	entry[devel]=3
	entry[editors]=4
	entry[emulators]=5
	entry[games]=6
	entry[gnome]=7
	entry[i18n]=8
	entry[kde]=9
	entry[kernels]=19
	entry[lib]=10
	entry[modules]=11
	entry[multimedia]=12
	entry[network]=13
	entry[office]=14
	entry[science]=15
	entry[system]=16
	entry[x11]=17
	entry[xfce]=18

	local select=$(kdialog --combobox "Select category"  "${!entry[@]}") flag=$?
	if [ $flag -eq 1 ];then
		exit
	else
		if [[ ! -z $select ]];then
			echo "${entry[$select]}"
		else
			echo ${entry[any]}
		fi
	fi
}

popup(){
	kdialog --title "$1" --passivepopup "$2"  10
}

ynbox(){
	kdialog --warningcontinuecancel "${config} already exists. Overwrite?"
	local flag=$?
	if [ ${flag} -eq 0 ];then
		configdlg
	else
		exit
	fi
}

writer(){
	echo $1 >> "${config}"
}

new_config(){
	echo -n > ${config}
}

configdlg(){
	local user pwd
	user=$(userbox)
	pwd=$(pwdbox)
	if [[ -z ${user} ]] && [[ -z ${pwd} ]];then
		popup "Warning" "No config written."
		exit
	else
		new_config
		writer "USR=${user}"
		writer "PWD=${pwd}"
		popup "Success" "Config written."
	fi
}

pkgbox(){
	source ${uri}
	local i=0 item name switch=off
	if [[ ! -z ${pkgbase} ]];then
		for n in ${pkgname[*]};do
			item[$i]="$i $n $switch"
			name[$i]="$n"
			i=$((i+1))
		done
	fi
	local select=$(kdialog --checklist "Select packages:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No packages selected."
		exit
	fi
	local list
	for s in ${select//\"/};do
		list="${list:-}${list:+,}${name[$s]}"
	done
	echo ${list}
}

rulesbox(){
 	local rules=('anyelf' 'array' 'badbackups' 'capsnamespkg' 'carch' 'checksums' 'directoryname' 'elfexecstack' 'elfpaths' 'elftextrel' 'emptydir' 'extravars' 'fhs-infopages' 'fhs-manpages' 'filenames' 'fileownership' 'giomodules' 'glibschemas' 'gnomemime' 'hardlinks' 'hicoloricons' 'infodirectory' 'infoinstall' 'invalidstartdir' 'javafiles' 'kdeprograms' 'libtool' 'license' 'licensepkg' 'lots-of-docs' 'mimedesktop' 'mimefiles' 'missingbackups' 'perllocal' 'permissions' 'pkgnameindesc' 'rpath' 'rubypaths' 'scrollkeeper' 'sfurl' 'shebangdepends' 'sodepends' 'splitpkgfunctions' 'splitpkgmakedeps' 'symlink' 'tags' 'urlpkg')
	local i=0 item rule switch=off
	for n in ${rules[*]};do
 			item[$i]="$i $n $switch"
 			rule[$i]="$n"
			i=$((i+1))
	done
	local select=$(kdialog --checklist "Select rules:" ${item[@]}) flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No rules selected."
		exit
	fi
	local list
	for s in ${select//\"/};do
		list="${list:-}${list:+,}${rules[$s]}"
	done
	echo ${list}
}

truncate(){
	local fn=$1
	echo ${fn%%-[0-9]*}
}

configure(){
   	if [[ ! -f "${config}" ]]; then
		configdlg
	else
		ynbox
	fi
}

get_session(){
	local user pwd  url="${aur_url}/login/" login session
	[[ -f "${config}" ]] &&  source ${config}
	if [[ ! -z ${USR} ]] && [[ ! -z ${PWD} ]];then
		user=${USR}
		pwd=${PWD}
	else
		user=$(userbox)
		pwd=$(pwdbox)
	fi
	login=$(curl -sSi -F user=${user} -F passwd=${pwd} -H 'Expect: ' ${url})
	session=$(echo "${login}" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
	echo ${session}
}

submit(){
	# $1: session
	local submit sid category url="${aur_url}/submit/"
	if [[ -z $1 ]];then
		popup "Canceled AUR upload." "No session registered."
		exit
	else
		popup "AUR Session" "$1"
	fi
	submit=$(curl -sSi -H 'Expect: ' -b $1 ${url})
	sid=$(echo "${submit}" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)

	submit=$(curl -sSi -H 'Expect: ' -F token="${sid}" -F pkgsubmit=1 -F category="$(catbox)" -F pfile=@${uri} -b $1 ${url} | tr -d '\r')

	echo "$(echo $submit)" > $wd/submit.log

	pkg_url="${aur_url}"$(echo "${submit}" | awk '/^Location: / {print $2}')
}

upload(){
	popup "AUR upload started." "$(basename $uri)"
	submit "$(get_session)"
	local html='<a href="'"${pkg_url}"'">'"${pkg_url}"'</a>'
	popup "AUR upload finished." "${html}"
}

file_list(){
	local fn reqfn flist
	for i in ${uri[*]};do
		fn=$(basename $i)
		if [ ${action} == "remove" ];then
			reqfn=$(truncate $fn)
			flist+=" ${reqfn}"
		else
			flist+=" ${fn}"
		fi
	done
	echo ${flist}
}

optbox(){
	local q=$(kdialog --inputbox "Enter query:")
	#local flag=$?
	#if [ $flag -eq 1 ];then
		#popup "Chancel" "No input:"
	#else
		echo $q
	#fi
}

run_in_konsole(){
	konsole --noclose --hide-menubar --workdir "${wd}" -e $SHELL -c "$(cmd_gen)"
}

cmd_gen(){
	local bin cmd ext="tar.xz"
	case ${param} in
		"-m")
			bin="makepkg"
			for p in ${args[*]};do
				if [[ $p == "--pkg" ]];then
					cmd="${bin} ${args} $(pkgbox)"
				else
					cmd="${bin} ${args}"
				fi
			done
		;;
		"-n")
			bin="namcap"
			if [[ $args == "-r" ]] || [[ $args == "-e" ]];then
				cmd="${bin} ${args} $(rulesbox) $uri"
			else
				cmd="${bin} ${args} $uri"
			fi
		;;
		"-r")
			bin="repo"
			cmd="${bin}-${action} ${args} ${repo_name}.${type}.$ext $(file_list)"
		;;
		"-p")
			bin="pacman"
			cmd="${bin} ${args} $(file_list)"
		;;
		"-t")
			bin="pactree"
			fn=$(basename $uri)
			reqfn=$(truncate $fn)
			cmd="${bin} ${args} ${reqfn}"
		;;
		"-f")
			bin="pkgfile"
			fn=$(basename $uri)
			reqfn=$(truncate $fn)
			if [[ $args == "-u" ]];then
				cmd="sudo ${bin} ${args} ${reqfn}"
			else
				cmd="${bin} ${args} ${reqfn}"
			fi
		;;
		"-y")
			bin="yaourt"
			cmd="${bin} ${args} $(optbox)"
		;;
	esac
	echo ${cmd}
}

main(){
	case ${param} in
		"-m" | "-t" | "-f" | "-n")
			wd=$(dirname ${uri})
			run_in_konsole
		;;
		"-r" | "-p")
			for i in ${uri[*]};do
				wd=$(dirname $i)
				repo_name=$(basename ${wd})
			done
			run_in_konsole
		;;
		"-a")
			upload
		;;
		"-c")
			configure
		;;
		"-y")
			run_in_konsole
		;;
	esac
}

main
