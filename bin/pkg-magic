#!/bin/bash

param=$1
uri=$2
args=$3
action=$4
type=$5

config="$HOME/.config/aurlogin"
aur_url="https://aur.archlinux.org"

userbox(){
	kdialog --inputbox "Enter username:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No username"
	fi
}

pwdbox(){
	kdialog --password "Enter password:"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No password"
	fi
}

catbox(){
	local categories=('daemons' 'devel' 'editors' 'emulators' 'games' 'gnome' 'i18n' 'kde' 'kernels' 'lib' 'modules' 'multimedia' 'network' 'office' 'science' 'system' 'x11' 'xfce')
	kdialog --combobox "Select category"  "${categories[@]}"
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No category"
		exit
	fi
}

popup(){
	kdialog --title "$1" --passivepopup "$2"  10
}

ynbox(){
	kdialog --warningcontinuecancel "${config} already exists. Overwrite?"
	local flag=$?
	if [ ${flag} -eq 0 ];then
		configdlg
	else
		exit
	fi
}

writer(){
	echo $1 >> "${config}"
}

new_config(){
	echo -n > ${config}
}

configdlg(){
	local user pwd
	user=$(userbox)
	pwd=$(pwdbox)
	if [[ -z ${user} ]] && [[ -z ${pwd} ]];then
		popup "Warning" "No config written."
		exit
	else
		new_config
		writer "USR=${user}"
		writer "PWD=${pwd}"
		popup "Success" "Config written."
	fi
}

pkgbox(){
	source ${uri}
	local i=0 ilist nlist plist select
	if [[ ! -z $pkgbase ]];then
		for n in ${pkgname[*]};do
			ilist[$i]="$i $n off"
			nlist[$i]="$n"
			i=$((i+1))
		done
	fi
	select=$(kdialog --checklist "Select packages:" ${ilist[@]})
	local flag=$?
	if [ $flag -eq 1 ];then
		popup "Chancel" "No packages selected."
		exit
	fi
	local p="${select//\"/}"
	for j in $p;do
		plist+="${nlist[$j]},"
	done
	echo ${plist}
}

truncate(){
	local fn=$1
	echo ${fn%%-[0-9]*}
}

configure(){
   	if [[ ! -f "${config}" ]]; then
		configdlg
	else
		ynbox
	fi
}

get_session(){
	local user pwd  url="${aur_url}/login/" login session
	[[ -f "${config}" ]] &&  source ${config}
	if [[ ! -z ${USR} ]] && [[ ! -z ${PWD} ]];then
		user=${USR}
		pwd=${PWD}
	else
		user=$(userbox)
		pwd=$(pwdbox)
	fi
	login=$(curl -sSi -F user=${user} -F passwd=${pwd} -H 'Expect: ' ${url})
	session=$(echo "${login}" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
	echo ${session}
}

submit(){
	# $1: session
	local submit sid category url="${aur_url}/submit/"
	if [[ -z $1 ]];then
		popup "Cancelled AUR upload." "No session registered."
		exit
	fi
	category="$(catbox)"
	popup "Selected AUR category" "${category}"
	submit=$(curl -sSi -H 'Expect: ' -b $1 ${url})
	sid=$(echo "${submit}" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)
	submit=$(curl -sSi -H 'Expect: ' -F token="${sid}" -F pkgsubmit=1 -F category="${category}" -F pfile=@${uri} -b $1 ${url} | tr -d '\r')
	pkg_url="${aur_url}"$(echo "${submit}" | awk '/^Location: / {print $2}')
}

upload(){
	popup "AUR upload started." "$(basename $uri)"
	submit "$(get_session)"
	local html='<a href="'"${pkg_url}"'">'"${pkg_url}"'</a>'
	popup "AUR upload finished." "${html}"
}

file_list(){
	local fn reqfn flist
	for i in ${uri[*]};do
		fn=$(basename $i)
		if [ ${action} == "remove" ];then
			reqfn=$(truncate $fn)
			flist+=" ${reqfn}"
		else
			flist+=" ${fn}"
		fi
	done
	echo ${flist}
}

cmd_out(){
	cd $wd
	echo "$(eval $(cmd_gen))"
}

run_in_konsole(){
	konsole --noclose --hide-menubar --workdir "${wd}" -e $SHELL -c "$(cmd_gen)"
}

run_msgbox(){
	kdialog --msgbox "$(cmd_out)"
}

cmd_gen(){
	local bin cmd ext="tar.xz"
	case ${param} in
		"-m")
			bin="makepkg"
			for p in ${args[*]};do
				if [[ $p == "--pkg" ]];then
					cmd="${bin} ${args} $(pkgbox)"
				else
					cmd="${bin} ${args}"
				fi
			done
		;;
		"-n")
			bin="namcap"
			cmd="${bin} ${args} ${uri}"
		;;
		"-r")
			bin="repo"
			cmd="${bin}-${action} ${args} ${repo_name}.${type}.$ext $(file_list)"
		;;
		"-p")
			bin="pacman"
			cmd="sudo ${bin} ${args} $(file_list)"
		;;
		"-t")
			bin="pactree"
			fn=$(basename $uri)
			reqfn=$(truncate $fn)
			cmd="${bin} ${args} ${reqfn}"
		;;
	esac
	echo ${cmd}
}

main(){
	case ${param} in
		"-m" | "-n" | "-t")
			wd=$(dirname ${uri})
			run_in_konsole
		;;
		"-r" | "-p")
			for i in ${uri[*]};do
				wd=$(dirname $i)
				repo_name=$(basename ${wd})
			done
			run_in_konsole
		;;
		"-a")
			upload
		;;
		"-c")
			configure
		;;
	esac
}

main
