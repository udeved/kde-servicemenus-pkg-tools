#!/bin/bash
#
#   pkg-magic - controlling script for kde-servicemenus-pkg-tools
#
#   Copyright (c) 2013-2014 artoo <flower_of_life@gmx.net>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

shopt -s nullglob

VERSION=@version@

popup(){
    kdialog --title "Pkg-tools" --passivepopup "$1"  10
}

run(){
    konsole --noclose --hide-menubar --workdir "${rundir}" -e $SHELL -c "${cmd}"
}

get_link(){
    local html='<a href="'"$1"'">'"$1"'</a>'
    echo ${html}
}

truncate(){
    local temp=${1##*/}
    local ret=${temp%%-[0-9]*}
    echo $ret
}

graphdir=${XDG_PICTURES_DIR:-~/pactree_graphs}

if ! [[ -d ${graphdir} ]];then
    mkdir -p ${graphdir}
fi

is_makepkg=false
is_repo_add=false
is_repo_remove=false
is_files=false
is_namcap=false
is_pactree=false
is_config=false
is_checksum=false

dbtype='db'
repo_param=''

cmd=''
rundir=$(pwd)

actions='t:A:Z:n:m:af:rf'

while getopts "${actions}" arg;do
    case ${arg} in
	m)
	    is_makepkg=true
	    uri="${OPTARG}"
	;;
	Z)
            is_checksum=true
	;;
	a)
	    is_repo_add=true
	;;
	r)
	    is_repo_remove=true
	;;
	f)
	    is_files=true
	    dbtype=files
	    repo_param='-f'
	;;
	n)
	    is_namcap=true
	    uri="${OPTARG}"
	;;
	t)
	    is_pactree=true
	    uri="${OPTARG}"
	;;
    esac
done

OPTS=("${*:$OPTIND}")

if ${is_makepkg}; then
	cmd="makepkg ${OPTS}"
    run
elif ${is_checksum};then
	cmd="updpkgsums"
	run
elif ${is_namcap}; then
    cmd="namcap ${OPTS} ${uri}"
    run
elif ${is_repo_add};then
    name=${rundir##*/}
    case ${name} in
	'x86_64' | 'i686' | 'any')
	    rd=$(dirname ${rundir})
	    rn=${rd##*/}
	    rdb="${rn}.${dbtype}"
	;;
	*)
	    rdb="${name}.${dbtype}"
	;;
    esac
    ext="tar.xz"
    cmd="repo-add ${repo_param} ${rundir}/${rdb}.${ext} ${OPTS}"
    run
elif ${is_repo_remove};then
    name=${rundir##*/} list=
    for u in ${OPTS[@]};do
	list+=($(truncate $u))
    done
    name=${rundir##*/}
    case ${name} in
	'x86_64' | 'i686' | 'any')
	    rd=$(dirname ${rundir})
	    rn=${rd##*/}
	    rdb="${rn}.${dbtype}"
	;;
	*)
	    rdb="${name}.${dbtype}"
	;;
    esac
    ext="tar.xz"
    cmd="repo-remove ${repo_param} ${rundir}/${rdb}.${ext} ${list[@]}"
    run
elif ${is_pactree};then
    pn=$(truncate ${uri})
    for arg in ${*:$OPTIND};do
	case ${arg} in
	    "-g" | "-gs")
		img="${pn}_deps"
	    ;;
	    "-gr" | "-grs")
		img="${pn}_revdeps"
	    ;;
	    "-glu" | "-glus")
		img="${pn}_nodup"
	    ;;
	esac
    done
    ext="png"
    fn="${graphdir}/${img}.${ext}"
    echo "$(pactree ${OPTS} ${pn})" | dot -T ${ext} > "${fn}"
    popup "$(get_link "${fn}")"
fi
