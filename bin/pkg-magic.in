#!/bin/bash
#
#   pkg-magic - controlling script for kde-servicemenus-pkg-tools
#
#   Copyright (c) 2013-2014 artoo <flower_of_life@gmx.net>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

shopt -s nullglob

VERSION=@version@

catbox(){
    declare -A item
    item[any]=0
    item[daemons]=2
    item[devel]=3
    item[editors]=4
    item[emulators]=5
    item[games]=6
    item[gnome]=7
    item[i18n]=8
    item[kde]=9
    item[lib]=10
    item[modules]=11
    item[multimedia]=12
    item[network]=13
    item[office]=14
    item[science]=15
    item[system]=16
    item[x11]=17
    item[xfce]=18
    item[kernels]=19
    local select=$(kdialog --title "Categories" --combobox "Select category"  "${!item[@]}")
    if [[ -n $select ]];then
	echo ${item[$select]}
    else
	popup "Pkg-tools" "AUR upload aborted. No category selected"
	exit 1
    fi
}

userbox(){
    kdialog --title "AUR login" --inputbox "Enter username:"
}

pwdbox(){
    kdialog --title "AUR login" --password "Enter password:"
}

popup(){
    kdialog --title "Pkg-tools" --passivepopup "$1"  10
}

run(){
    konsole --noclose --hide-menubar --workdir "${rundir}" -e $SHELL -c "${cmd}"
}

get_link(){
    local html='<a href="'"$1"'">'"$1"'</a>'
    echo ${html}
}

truncate(){
    local temp=${1##*/}
    local ret=${temp%%-[0-9]*}
    echo $ret
}

configure(){
    if [[ ! -f "${config}" ]]; then
	config_wizzard
    else
	ask_config_overwrite
    fi
}

ask_config_overwrite(){
    kdialog --title "Warning" --warningcontinuecancel "${config} already exists. Overwrite?"
    local flag=$?
    if [ ${flag} -eq 0 ];then
	config_wizzard
    else
	exit 1
    fi
}

config_wizzard(){
    local user pwd
    user=$(userbox)
    pwd=$(pwdbox)
    if [[ -z ${user} ]] && [[ -z ${pwd} ]];then
	popup "No config created."
	exit
    else
	new_config
	config_writer "USR=${user}"
	config_writer "PWD=${pwd}"
	popup "${config} created."
    fi
}

config_writer(){
    echo $1 >> "${config}"
}

new_config(){
    echo -n > ${config}
}

aur_login(){
    local user pwd login session loginurl="${url}/login/"
    user=${USR}
    pwd=${PWD}
    login=$(curl -sSi -F user=${user} -F passwd=${pwd} -H 'Expect: ' ${loginurl})
    session=$(echo "${login}" | awk '/^Set-Cookie: / {print $2}' | tr -d ';')
    echo "${session}"
}

upload(){
    local session="$(aur_login)"
    if [[ -n ${session} ]];then
	local submiturl="${url}/submit/" submit= sid=
	submit=$(curl -sSi -H 'Expect: ' -b ${session} ${submiturl})
	sid=$(echo "${submit}" | grep 'input.type..hidden..name..token..value' | cut -d\" -f6)
	local cat=$(catbox)
	submit=$(curl -sSi -H 'Expect: ' -F token="${sid}" -F pkgsubmit=1 -F category="${cat}" -F pfile=@${uri} -b ${session} ${submiturl} | tr -d '\r')
	local pkgurl="${url}"$(echo "${submit}" | awk '/^Location: / {print $2}')
	popup "$(get_link ${pkgurl})"
    else
	popup "No session registered. Wrong user credentials?"
	exit 1
    fi
}

url="https://aur.archlinux.org"

if [[ -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs ]]; then
    . ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs
fi

configdir=${XDG_CONFIG_HOME:-~/.config}

config=${configdir}/pkg-tools.conf

if [[ ! -f ${config} ]];then
    popup "Starting config wizzard" && config_wizzard
    . ${config}
else
    . ${config}
fi

graphdir=${XDG_PICTURES_DIR:-~/pactree_graphs}

if ! [[ -d ${graphdir} ]];then
    mkdir -p ${graphdir}
fi

is_makepkg=false
is_repo_add=false
is_repo_remove=false
is_files=false
is_namcap=false
is_aurball=false
is_pactree=false
is_aur=false
is_config=false

dbtype='db'
repo_param=''

cmd=''
rundir=$(pwd)

actions='c:u:t:A:n:m:af:rf'

while getopts "${actions}" arg;do
    case ${arg} in
	m)
	    is_makepkg=true
	    uri="${OPTARG}"
	;;
	a)
	    is_repo_add=true
	;;
	r)
	    is_repo_remove=true
	;;
	f)
	    is_files=true
	    dbtype=files
	    repo_param='-f'
	;;
	n)
	    is_namcap=true
	    uri="${OPTARG}"
	;;
	A)
	    is_aurball=true
	;;
	t)
	    is_pactree=true
	    uri="${OPTARG}"
	;;
	u)
	    is_aur=true
	    uri="${OPTARG}"
	;;
	c)
	    is_config=true
	;;
    esac
done

OPTS=("${*:$OPTIND}")

if ${is_makepkg}; then
    if [[ ${OPTS} == "-g" ]];then
	cmd="updpkgsums"
    else
	cmd="makepkg ${OPTS}"
    fi
    run
elif ${is_aurball}; then
    cmd="mkaurball ${OPTS}"
    run
elif ${is_namcap}; then
    cmd="namcap ${OPTS} ${uri}"
    run
elif ${is_repo_add};then
    name=${rundir##*/}
    case ${name} in
	'x86_64' | 'i686' | 'any')
	    rd=$(dirname ${rundir})
	    rn=${rd##*/}
	    rdb="${rn}.${dbtype}"
	;;
	*)
	    rdb="${name}.${dbtype}"
	;;
    esac
    ext="tar.xz"
    cmd="repo-add ${repo_param} ${rundir}/${rdb}.${ext} ${OPTS}"
    run
elif ${is_repo_remove};then
    name=${rundir##*/} list=
    for u in ${OPTS[@]};do
	list+=($(truncate $u))
    done
    name=${rundir##*/}
    case ${name} in
	'x86_64' | 'i686' | 'any')
	    rd=$(dirname ${rundir})
	    rn=${rd##*/}
	    rdb="${rn}.${dbtype}"
	;;
	*)
	    rdb="${name}.${dbtype}"
	;;
    esac
    ext="tar.xz"
    cmd="repo-remove ${repo_param} ${rundir}/${rdb}.${ext} ${list[@]}"
    run
elif ${is_pactree};then
    pn=$(truncate ${uri})
    for arg in ${*:$OPTIND};do
	case ${arg} in
	    "-g" | "-gs")
		img="${pn}_deps"
	    ;;
	    "-gr" | "-grs")
		img="${pn}_revdeps"
	    ;;
	    "-glu" | "-glus")
		img="${pn}_nodup"
	    ;;
	esac
    done
    ext="png"
    fn="${graphdir}/${img}.${ext}"
    echo "$(pactree ${OPTS} ${pn})" | dot -T ${ext} > "${fn}"
    popup "$(get_link "${fn}")"
elif ${is_aur}; then
    upload
elif ${is_config}; then
    configure
fi
